#!/bin/bash

#TODO: Documentation

progname="PGP-Backup"
libname="Encryption"
version="__VERSION__"

# ARG_POSITIONAL_DOUBLEDASH()
# ARG_POSITIONAL_SINGLE([input], [Folder to encrypt], ["."])
# ARG_OPTIONAL_SINGLE([depth], [d], [Depth in which folders are packed], [-1])
# ARG_OPTIONAL_SINGLE([output], [o], [Folder to store encrypted files], ["../backup"])
# ARG_OPTIONAL_BOOLEAN([all],[a],[Includes also hidden files in backup])
# ARG_OPTIONAL_BOOLEAN([name-hashing],[n],[Hashes file and directory names])
# ARG_OPTIONAL_BOOLEAN([quiet],[q],[Supresses all output, overwrites verbose parameter])
# ARG_OPTIONAL_BOOLEAN([verbose],[V],[Prints more information about what the script is doing])
# ARG_OPTIONAL_REPEATED([recipient], [r], [recipients to encrypt for, is passed through to gpg encrypt command])
# ARG_HELP([short program description (optional)],[long program description (optional)])
# ARG_VERSION([echo $version])
# ARGBASH_GO()

# [ <-- needed because of Argbash

readonly inFolder="${_arg_input#"/"}"
readonly outFolder="${_arg_output#"/"}"
depth=$_arg_depth

# Determine which tmp folder to use
readonly rootFolder=$(dirname $outFolder)
if [ -d "$rootFolder/tmp" ]; then
    for i in {1..9}
    do
        if [ ! -d "$rootFolder/tmp$i" ]; then
            tmp="tmp$i"
            break
        fi
    done
else
    tmp="tmp"
fi
readonly tmpFolder="$rootFolder/$tmp"

# Functions
function printHelper {
    local message=$1
    local verbose=$2

    if [ "$_arg_quiet" == "off" ]; then
        if [ $verbose == "off" ] || [ "$_arg_verbose" == "on" ]; then
            echo "$message"
        fi
    fi
}

function printLog {
    local message=$1

    printHelper "$message" "off"
}

function printVerbose {
    local message=$1

    printHelper "$message" "on"
}

function hashName {
    local fileName=$1

    echo "${_arg_emails[0]}-$(basename "$fileName")" | shasum -a 256 | cut -f1 -d " "
}

function execute {
    local command=$1

    printVerbose "> $command"
    eval "$command"
}

function encryptFile {
    local file=$1
    local path=$2

    local command="gpg --batch --no-tty -q --output \"$path.gpg\" --encrypt"
    for i in ${_arg_recipient[@]}; do
        command+=" --recipient \"$i\""
    done
    command+=" \"$file\""
    execute "$command"
}

function checkFiles {
    local path=$1

    findCommand="find \"$path\" -maxdepth 1"
    if [ "$_arg_all" = "off" ]; then
        findCommand+=" ! -path \"*/.*\"";
    fi
    findCommand+=" -type f"

    eval $findCommand | while read i
    do
        if [ ! -f "$outFolder/$i.gpg" ] && [[ "$i" != *decrypt.sh ]] && [[ "$i" != *pgpbackup-decrypt ]]; then
            encryptFile "$i" "$outFolder/${i#"$inFolder"}"
        fi
    done
}

function handleDir {
    local depth=$1
    local path=$2

    # Create necessary folders
    if [ "$path" = "$inFolder" ]; then
        mkdir -p "$outFolder"
        mkdir "$tmpFolder"
        cp "$inFolder/decrypt.sh" "$outFolder/decrypt.sh" 2> /dev/null
        cp "$inFolder/pgpbackup-decrypt" "$outFolder/pgpbackup-decrypt" 2> /dev/null
    fi

    if [ $depth -eq 0 ]; then
        path="$path/."
        path=${path#"$inFolder/"}
        if [ "$path" = "." ]; then
            folderPath="."
            folderName="backup"
        else
            folderPath="$(dirname "${path%"/."}")"
            folderName="$(basename "${path%"/."}")"
        fi

        oldPath=$PWD
        cd "$inFolder/$path"

        findCommand="find \".\""
        if [ "$_arg_all" = "off" ]; then
            findCommand+=" ! -path \"*/.*\""
        fi
        findCommand+=" ! -name \".\" ! -name \"decrypt.sh\" ! -name \"pgpbackup-decrypt\" -type f"

        if [ ! -d "$oldPath/$tmpFolder/$folderPath" ]; then
            mkdir "$oldPath/$tmpFolder/$folderPath"
        fi
        eval $findCommand | while read i
        do
            command="zip -qur \"$oldPath/$tmpFolder/$folderPath/$folderName.pb.zip\" \"${i#"$inFolder/"}\""
            execute "$command"
        done
        cd "$oldPath"

        if [ "$path" == "." ]; then
            path=$folderName
        fi
        if [ -f "$tmpFolder/${path%"/."}.pb.zip" ]; then
            encryptFile "$tmpFolder/${path%"/."}.pb.zip" "$outFolder/${path%"/."}.zip"
        else
            >&2 echo "Error: $tmpFolder/${path%"/."}.pb.zip not found! (This is probably a programming error)"
            rm -r "$tmpFolder"
            exit 1
        fi
    else
        if [ "$path" != "$inFolder" ]; then
            mkdir "$outFolder/"${path#"$inFolder"}
            mkdir "$tmpFolder/"${path#"$inFolder"}
        fi

        # Handle files in directory
        checkFiles "$path"

        # Handle directories in directory
        findCommand="find \"$path\" -maxdepth 1 ! -path \"$path\""
        if [ "$_arg_all" = "off" ]; then
            findCommand+=" ! -path \"*/.*\""
        fi
        findCommand+=" -type d"

        eval $findCommand | while read i
        do
            if [ $depth -gt 0 ]; then
                handleDir $[$depth-1] "$i"
            elif [ $depth -lt 0 ]; then
                handleDir $depth "$i"
            fi
        done
    fi
}

function addSpacingToOverviewFile {
    local depth=$1
    local file=$2

    for (( ; depth>0; depth-- ))
    do
        if [ $depth -eq 1 ] && [ $file -eq 1 ]; then
            printf "| "
        elif [ $depth -eq 1 ] && [ $file -eq 0 ]; then
            printf "|_"
        else
            printf "  "
        fi
    done
}

function createOverviewFile {
    local path=$1
    local depth=$2
    local overviewFile="$3"

    findCommand="find \"$path\" -mindepth 1 -maxdepth 1"
    if [ "$_arg_all" = "off" ]; then
        findCommand+=" ! -path \"*/.*\""
    fi

    # Add files to overview file
    eval "$findCommand -type f" | while read i
    do
        addSpacingToOverviewFile $depth 1 >> "$overviewFile"
        local name=$(basename "$i")
        if [[ $name == *.gpg ]]; then
            printf "%s (%s)\n" "${name::-4}" $(hashName "$name") >> "$overviewFile"
        else
            printf "%s\n" "$name" >> "$overviewFile"
        fi
    done

    # Add directories to overview file
    eval "$findCommand -type d" | while read i
    do
        addSpacingToOverviewFile $depth 0 >> "$overviewFile"
        printf "%s (%s)\n" $(basename "$i") $(hashName $(basename "$i")) >> "$overviewFile"
        createOverviewFile "$i" $[$depth + 1] "$overviewFile"
    done
}

function dependencyMissing {
    local command=$1

    ! command -v "$command" >/dev/null 2>&1 && echo >&2 "$command command not found!"
}

# Start of program
printLog "$progname $version - $libname"

# Check dependencies
valid="on"
if dependencyMissing "find"; then valid="off"; fi
if dependencyMissing "awk"; then valid="off"; fi
if dependencyMissing "gpg"; then valid="off"; fi
if dependencyMissing "dirname"; then valid="off"; fi
if dependencyMissing "basename"; then valid="off"; fi
if dependencyMissing "rm"; then valid="off"; fi
if dependencyMissing "mv"; then valid="off"; fi
if dependencyMissing "cd"; then valid="off"; fi
if dependencyMissing "zip"; then valid="off"; fi

if [ "$valid" = "off" ]; then
    printLog "Some dependencies are missing!"
    printLog "Aborted."
    exit 2
fi

# Delete old backup folder, if existing
if [ -d "$outFolder" ]; then
    if [ -f "$outFolder/decrypt.sh" ]; then
        rm -r "$outFolder"
        printLog "Removed existing backup folder."
    else
        printLog "The backup folder is already existing."
        printLog "Aborted."
        exit 3
    fi
fi

handleDir $depth $email $inFolder

if [ "$_arg_name_hashing" = "on" ]; then
    # Create overview file
    overviewFile="$outFolder/overview.txt"
    createOverviewFile "$outFolder" 0 "$overviewFile"

    # Hash file names
    find "$outFolder" -depth -iname "*.gpg" -type f | while read i
    do
        # Hash filename
        mv "$i" "$(dirname "$i")/$(hashName $(basename "$i")).gpg"
    done

    # Hash folder names
    find "$outFolder" -mindepth 1 -depth -type d | while read j
    do
        path="$(dirname "$j")"
        name="$(basename "$j")"
        hashedName="$(hashName "$name")"
        touch "$path/foldernames.txt"
        echo "$hashedName;$name" >> "$path/foldernames.txt"
        mv "$j" "$(dirname "$j")/$hashedName"
    done
    find "$outFolder" -type f -iname "foldernames.txt" | while read j
    do
        encryptFile "$j" "$j" 0
        rm "$j"
    done

    # Encrypt overview file
    encryptFile "$overviewFile" "$overviewFile"
    rm "$overviewFile"
fi

# Tidy up
rm -r "$tmpFolder"

printLog "Finished encrypting!"
exit 0
# ] <-- needed because of Argbash
