#!/bin/bash

#TODO: Documentation

progname="PGP-Backup"
libname="Encryption"
version="__VERSION__"

# ARG_POSITIONAL_DOUBLEDASH()
# ARG_POSITIONAL_SINGLE([input], [Folder to encrypt], ["."])
# ARG_OPTIONAL_SINGLE([compression], [c], [Used compression priority: veryfast, fast, default, small, verysmall], ["default"])
# ARG_OPTIONAL_SINGLE([depth], [d], [Depth in which folders are packed], [-1])
# ARG_OPTIONAL_SINGLE([output], [o], [Folder to store encrypted files], ["../backup"])
# ARG_OPTIONAL_BOOLEAN([all],[a],[Includes also hidden files in backup])
# ARG_OPTIONAL_BOOLEAN([name-hashing],[n],[Hashes file and directory names])
# ARG_OPTIONAL_BOOLEAN([quiet],[q],[Supresses all output, overwrites verbose parameter])
# ARG_OPTIONAL_BOOLEAN([verbose],[V],[Prints more information about what the script is doing])
# ARG_OPTIONAL_BOOLEAN([zip],[z],[Ignores compression and uses zip instead of tar])
# ARG_OPTIONAL_REPEATED([recipient], [r], [recipients to encrypt for, is passed through to gpg encrypt command])
# ARG_HELP([short program description (optional)],[long program description (optional)])
# ARG_VERSION([echo $version])
# ARGBASH_GO()

# [ <-- needed because of Argbash

depth=$_arg_depth

#__INIT__

# Determinate compression method
compressionCmd=""
if [ "$_arg_zip" = "on" ]; then
    bundleCmd="zip -qur \"%s\" \"%s\""
    containerExtension="zip"
    archiveExtension="zip"
else
    bundleCmd="tar -rf \"%s\" \"%s\""
    containerExtension="tar"
    if [ "$_arg_compression" = "default" ]; then
        compressionCmd="xz -2 \"%s\""
        archiveExtension="$containerExtension.xz"
    elif [ "$_arg_compression" = "small" ]; then
        compressionCmd="xz -6 \"%s\""
        archiveExtension="$containerExtension.xz"
    elif [ "$_arg_compression" = "fast" ]; then
        compressionCmd="gzip -6 \"%s\""
        archiveExtension="$containerExtension.gz"
    elif [ "$_arg_compression" = "verysmall" ]; then
        compressionCmd="xz -9 \"%s\""
        archiveExtension="$containerExtension.xz"
    elif [ "$_arg_compression" = "veryfast" ]; then
        compressionCmd="gzip -1 \"%s\""
        archiveExtension="$containerExtension.gz"
    else
        printLogN "Invalid compression priority given! Have a look at help to get valid values."
        exit 5
    fi
fi

# Calculate size of files to encrypt
if [ "$_arg_quiet" = "off" ]; then
    printLogR "Precalculate file sizes for progressbar..."

    findCommand="find \"$inFolder\""
    if [ "$_arg_all" = "off" ]; then
        findCommand+=" ! -path \"*/.*\""
    fi
    findCommand+=" ! -name \".\" ! -name \"decrypt.sh\" ! -name \"pgpbackup-decrypt\" -type f"

    sizeTmp=0
    while read i
    do
        filesize=$(stat --printf="%s" "$i")
        sizeTmp=$[sizeTmp + filesize]
    done <<< $(eval "$findCommand")

    readonly size=$sizeTmp

    printLogN "Finished precalculation.                  "
fi

# Functions
#__FUNCTIONS__

function hashName {
    local fileName=$1

    echo "${_arg_recipient[0]}-$(basename "$fileName")" | shasum -a 256 | cut -f1 -d " "
}

function encryptFile {
    local file=$1
    local path=$2

    local command="gpg --batch --no-tty -q --output \"$path.gpg\" --encrypt"
    local i
    for i in ${_arg_recipient[@]}; do
        command+=" --recipient \"$i\""
    done
    command+=" \"$file\""
    execute "$command"
}

function checkFiles {
    local path=$1

    findCommand="find \"$path\" -maxdepth 1"
    if [ "$_arg_all" = "off" ]; then
        findCommand+=" ! -path \"*/.*\"";
    fi
    findCommand+=" -type f"

    local i
    while read i
    do
        if [[ "$i" != *decrypt.sh ]] && [[ "$i" != *pgpbackup-decrypt ]]; then
            local outFile="$outFolder/${i#"$inFolder"}.gpg"
            if [ ! -f "$outFile" ]; then
                encryptFile "$i" "$outFolder${i#"$inFolder"}"
            fi

            local filesize=$(stat --printf="%s" "$i")
            addToProgress $[filesize]
        fi
    done <<< $(eval "$findCommand")
}

function handleDir {
    local depth=$1
    local path=$2
    local first=$3

    # Create necessary folders
    if [ "$first" = "on" ]; then
        mkdir -p "$outFolder"
        cp "$inFolder/decrypt.sh" "$outFolder/decrypt.sh" 2> /dev/null
        cp "$inFolder/pgpbackup-decrypt" "$outFolder/pgpbackup-decrypt" 2> /dev/null
    fi

    if [ $depth -eq 0 ]; then
        if [ "$first" = "on" ]; then
            folderPath="."
            folderName="backup"
        else
            relPath=${path#"$inFolder/"}
            folderPath="$(dirname "$relPath")"
            folderName="$(basename "$relPath")"
        fi

        oldPath=$PWD
        cd "$path"

        findCommand="find \".\""
        if [ "$_arg_all" = "off" ]; then
            findCommand+=" ! -path \"*/.*\""
        fi
        findCommand+=" ! -name \".\" ! -name \"decrypt.sh\" ! -name \"pgpbackup-decrypt\" -type f"

        folderPathInTmp=$(validifyVirtualLink "$tmpFolder/$folderPath")
        if [ ! -d "$folderPathInTmp" ]; then
            mkdir "$folderPathInTmp"
        fi
        target="$folderPathInTmp/$folderName.pb.$containerExtension"
        local zippedBytes=0
        while read i
        do
            command="$(printf "$bundleCmd" "$target" "${i#"$inFolder/"}")"
            execute "$command"

            local filesize=$(stat --printf="%s" "${i#"$inFolder/"}")
            local half=$[filesize / 2]
            addToProgress $half
            zippedBytes=$[zippedBytes + filesize - half]
        done <<< $(eval "$findCommand")

        if [ ! "$compressionCmd" = "" ]; then
            execute "$(printf "$compressionCmd" "$target")"
        fi

        cd "$oldPath"

        if [ $first = "on" ]; then
            path=$folderName
        fi

        tmpFilePath=$(validifyLink "$tmpFolder/${path#"$inFolder/"}")
        if [ -f "$tmpFilePath.pb.$archiveExtension" ]; then
            encryptFile "$tmpFilePath.pb.$archiveExtension" "$outFolder/${path#"$inFolder/"}.$archiveExtension"
            rm "$tmpFilePath.pb.$archiveExtension"

            addToProgress $zippedBytes
        else
            >&2 echo "Error: $tmpFilePath.pb.$archiveExtension not found! (This is probably a programming error)"
            rm -r "$tmpFolder"
            exit 1
        fi
    else
        if [ "$first" = "off" ]; then
            mkdir "$outFolder/${path#"$inFolder"}"
            mkdir "$tmpFolder/${path#"$inFolder"}"
        fi

        # Handle files in directory
        checkFiles "$path"

        # Handle directories in directory
        findCommand="find \"$path\" -maxdepth 1 ! -path \"$path\""
        if [ "$_arg_all" = "off" ]; then
            findCommand+=" ! -path \"*/.*\""
        fi
        findCommand+=" -type d"

        local i
        eval "$findCommand" | while read i
        do
            if [ $depth -gt 0 ]; then
                handleDir $[depth - 1] "$i" "off"
            elif [ $depth -lt 0 ]; then
                handleDir $depth "$i" "off"
            fi
        done
    fi
}

function addSpacingToOverviewFile {
    local depth=$1
    local file=$2

    for (( ; depth>0; depth-- ))
    do
        if [ $depth -eq 1 ] && [ $file -eq 1 ]; then
            printf "| "
        elif [ $depth -eq 1 ] && [ $file -eq 0 ]; then
            printf "|_"
        else
            printf "  "
        fi
    done
}

function createOverviewFile {
    local path=$1
    local depth=$2
    local overviewFile="$3"

    findCommand="find \"$path\" -mindepth 1 -maxdepth 1"
    if [ "$_arg_all" = "off" ]; then
        findCommand+=" ! -path \"*/.*\""
    fi

    # Add files to overview file
    local i
    eval "$findCommand -type f" | while read i
    do
        addSpacingToOverviewFile $depth 1 >> "$overviewFile"
        local name=$(basename "$i")
        if [[ $name == *.gpg ]]; then
            printf "%s (%s)\n" "${name::-4}" $(hashName "$name") >> "$overviewFile"
        else
            printf "%s\n" "$name" >> "$overviewFile"
        fi
    done

    # Add directories to overview file
    local i
    eval "$findCommand -type d" | while read i
    do
        addSpacingToOverviewFile $depth 0 >> "$overviewFile"
        printf "%s (%s)\n" $(basename "$i") $(hashName $(basename "$i")) >> "$overviewFile"
        createOverviewFile "$i" $[$depth + 1] "$overviewFile"
    done
}

# Check dependencies
valid="on"
if dependencyMissing "find"; then valid="off"; fi
if dependencyMissing "awk"; then valid="off"; fi
if dependencyMissing "gpg"; then valid="off"; fi
if dependencyMissing "dirname"; then valid="off"; fi
if dependencyMissing "basename"; then valid="off"; fi
if dependencyMissing "rm"; then valid="off"; fi
if dependencyMissing "mv"; then valid="off"; fi
if dependencyMissing "cd"; then valid="off"; fi
if dependencyMissing "tar"; then valid="off"; fi
if dependencyMissing "xz"; then valid="off"; fi
if dependencyMissing "gzip"; then valid="off"; fi
if dependencyMissing "zip"; then valid="off"; fi

if [ "$valid" = "off" ]; then
    printLogN "Some dependencies are missing!"
    printLogN "Aborted."
    exit 2
fi

# Delete old backup folder, if existing
if [ -d "$outFolder" ]; then
    if [ -f "$outFolder/decrypt.sh" ]; then
        rm -r "$outFolder"
        printLogN "Removed existing backup folder."
    else
        printLogN "The backup folder is already existing."
        printLogN "Aborted."
        exit 3
    fi
fi

handleDir $depth "$inFolder" "on"

printLogN "Finished encrypting!"

if [ "$_arg_name_hashing" = "on" ]; then
    printLogR "Hash file and folder names..."

    # Create overview file
    overviewFile="$outFolder/overview.txt"
    createOverviewFile "$outFolder" 0 "$overviewFile"

    # Hash file names
    find "$outFolder" -depth -iname "*.gpg" -type f | while read i
    do
        # Hash filename
        mv "$i" "$(dirname "$i")/$(hashName $(basename "$i")).gpg"
    done

    # Hash folder names
    find "$outFolder" -mindepth 1 -depth -type d | while read j
    do
        path="$(dirname "$j")"
        name="$(basename "$j")"
        hashedName="$(hashName "$name")"
        touch "$path/foldernames.txt"
        echo "$hashedName;$name" >> "$path/foldernames.txt"
        mv "$j" "$(dirname "$j")/$hashedName"
    done
    find "$outFolder" -type f -iname "foldernames.txt" | while read j
    do
        encryptFile "$j" "$j" 0
        rm "$j"
    done

    # Encrypt overview file
    encryptFile "$overviewFile" "$overviewFile"
    rm "$overviewFile"

    printLogN "Finished hashing!            "
fi

# Tidy up
rm -r "$tmpFolder"

exit 0
# ] <-- needed because of Argbash
