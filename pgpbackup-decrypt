#!/bin/bash

#TODO: Documentation

progname="PGP-Backup"
libname="Decryption"
version="__VERSION__"

# ARG_OPTIONAL_BOOLEAN([unpack],[u],[Unpacks all archives from pgpbackup-encrypt])
# ARG_OPTIONAL_BOOLEAN([verbose],[V],[Prints more information about what the script is doing])
# ARG_HELP([short program description (optional)],[long program description (optional)])
# ARG_VERSION([echo $version])
# ARGBASH_GO()

# [ <-- needed because of Argbash

# Functions
function printHelper {
    local message=$1
    local verbose=$2

    if [ "$_arg_quiet" == "off" ]; then
        if [ $verbose == "off" ] || [ "$_arg_verbose" == "on" ]; then
            echo "$message"
        fi
    fi
}

function printLog {
    local message=$1

    printHelper "$message" "off"
}

function printVerbose {
    local message=$1

    printHelper "$message" "on"
}

# Start of program
printLog "$progname $version - $libname"

# Determine which tmp folder to use
if [ -d "../tmp" ]; then
    for i in {1..9}
    do
        if [ ! -d "../tmp$i" ]; then
            tmp="tmp$i"
            break
        fi
    done
else
    tmp="tmp"
fi
readonly tmpFolder=$tmp

# Check if decrypted folder exists
readonly decryptFolder="decrypted"
if [ -d "../$decryptFolder" ]; then
    printLog "The decrypt folder is already existing."
    printLog "Aborted."
    exit 1
fi

function decrypt {
    local path=$1

    find "$path" -maxdepth 1 -type f -iname "*.gpg" | while read j
    do
        oldPath=$PWD
        cd "../$tmpFolder"
        command="gpg -q --status-fd 1 --use-embedded-filename \"$oldPath/$j\""
        printVerbose "> $command"
        origFileName=$(eval "$command" | grep -E '^\[GNUPG:\] PLAINTEXT 62 [[:digit:]]+ .*$' | cut -f 5 -d " ")
        origFileName=$(echo  "$origFileName" | awk -niord '{printf RT?$0chr("0x"substr(RT,2)):$0}' RS=%..)
        origFile="$(dirname "$j")/$origFileName"
        mv "$origFileName" "../$decryptFolder/$origFile"
        if [ "$_arg_unpack" = "on" ] && [[ $origFile = *.pb.zip ]]; then
            cd "../$decryptFolder"
            folderName=${origFile::-7}
            if [[ "$origFile" = *backup.pb.zip ]]; then
                folderName="."
            fi
            command="unzip -q \"$origFile\" -d \"$folderName\""
            printVerbose "> $command"
            eval $command
            rm "$origFile"
        elif [ "$_arg_unpack" = "off" ] && [[ $origFile = *.pb.zip ]]; then
            cd "../$decryptFolder"
            folderName=${origFile::-7}
            mv "$origFile" "$folderName.zip"
        fi
        cd "$oldPath"
    done

    find "$path" -mindepth 1 -maxdepth 1 -type d | while read j
    do
        decrypt "$j"
    done
}

mkdir "../$tmpFolder"
mkdir "../$decryptFolder"

find . -depth ! -path . -type d | while read i
do
    mkdir -p "../$decryptFolder/$i"
done

decrypt "."

# Restore folder names
oldPath=$PWD
cd "../$decryptFolder"
find "." -mindepth 1 -depth -type d | while read j
do
    path=$(dirname "$j")
    hashedName=$(basename "$j")
    pattern="^${hashedName};.*$"
    if [ -f "$path/foldernames.txt" ]; then
        name=$(grep -E "$pattern" "$path/foldernames.txt" | cut -f 2 -d ";")
        if [ "$name" != "" ]; then
            mv "$j" "$path/$name"
        fi
    fi
done

find "." -type f -iname "foldernames.txt" | while read j
do
    rm "$j"
done

# Copy decrypt stuff to decrypted folder
cp "$oldPath/decrypt.sh" "decrypt.sh"
cp "$oldPath/pgpbackup-decrypt" "pgpbackup-decrypt" > /dev/null

# Tidy up
rm -r "../$tmpFolder"

printLog "Finished decrypting!"
exit 0
# ] <-- needed because of Argbash
